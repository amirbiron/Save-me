# כללים ל-Cursor התותח ⚡️⚡️

## כללי כתיבה

- תחשוב ותענה תמיד בעברית
- כתוב תמיד בשפה פשוטה ומובנת לכל ולא במילים גבוהות
- שמור על טון עניו, הסבר כאילו אתה מסביר לחבר טוב
- אם יש כמה אפשרויות, הצג קודם את הפתרון הפשוט והאמין ביותר

---

# הימנעות ממחיקות קבצים בטסטים ובסקריפטים

## 1. עבדו רק על תיקיות זמניות

- השתמשו ב-tmp לכל קלט/פלט בטסטים (pytest: tmp_path)
- אל תכתבו/תמחקו ב-root של הפרויקט או בתקיות קוד מקור

## 2. קבעו ENV/קונפיג למסלולי tmp בלבד

- ודאו ש-ENV כמו OUTPUT_DIR/WORKDIR מוגדרים לתיקיות tmp
- בדקו שהם לא ריקים לפני שימוש (assert ולא default ל-".")

## 3. אל תשתמשו בגלובים גורפים

- הימנעו מ-rm -rf */* או תבניות כמו build*
- העדיפו allowlist שמיועד לתת-תיקיה אחת ספציפית

## 4. סורגי בטיחות לפני מחיקה

- אל תמחקו אם הנתיב לא מתחת ל-allowlist
- אל תמחקו נתיבים מסוכנים: '/', '.', ספריית הפרויקט

## דוגמת Python למחיקה בטוחה

from pathlib import Path
import shutil

def safe_rmtree(path: Path, allow_under: Path) -> None:
	 p = path.resolve()
	 base = allow_under.resolve()
	 if not str(p).startswith(str(base)) or p in (Path('/'), base.parent, Path.cwd()):
		 raise RuntimeError(f"Refusing to delete unsafe path: {p}")
	 shutil.rmtree(p)
## 5. הימנעו משינוי cwd

- אם חייבים, שמרו/שחזרו cwd, והשתמשו בנתיבים מוחלטים למחיקה

## 6. נטרלו ניקוי מסוכן ב-CI

- הימנעו מ-git clean/reset על ה-workspace
- אם חייבים, עבדו על clone זמני בלבד

## 7. במקביליות – הפרידו תיקיות עבודה

- לכל טסט UUID ייחודי (ex: /tmp/app-test-<uuid>)
- או סדרו טסטים שנוגעים לקבצים לריצה סריאלית

## 8. בדקו תקלות מוקדם

- הרחיקו הרשאות כתיבה מ-src בתקופת הטסטים (chmod -w)
- כרכו קריאות מחיקה ב-wrapper בטוח כדי להרים חריגה מוקדם

## 9. בדיקת קוד לאיתור מחיקות לא בטוחות

rg -n "(shutil.rmtree|os.remove|Path.unlink|rm -rf|rimraf)" -S
## 10. שחזור לאחר מחיקה בטעות

- אל תבצעו merge/PR כדי לא לדרוס היסטוריה
- בצעו git restore/git checkout לקבצים או git revert לקומיטים
- אם אין היסטוריה מקומית: שחזרו מ-CI artifacts/ענף גיבוי/מכונה אחרת

